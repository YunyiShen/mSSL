% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mSSL.R
\name{mSSL}
\alias{mSSL}
\title{Multivariate and Chain Graphical Spike-and-Slab LASSO for continuous data}
\usage{
mSSL(
  Y,
  X,
  cg = TRUE,
  condexp = FALSE,
  lambdas = list(lambda1 = 1, lambda0 = seq(10, nrow(X), length = 10)),
  xis = list(xi1 = 0.01 * nrow(X), xi0 = seq(0.1 * nrow(X), nrow(X), length = 10)),
  theta_hyper_params = c(1, ncol(X) * ncol(Y)),
  eta_hyper_params = c(1, ncol(Y)),
  diag_penalty = FALSE,
  max_iter = 500,
  eps = 0.001,
  s_max_condition = 10 * nrow(X),
  obj_counter_max = 5,
  verbose = FALSE
)
}
\arguments{
\item{Y}{response matrix}

\item{X}{design matrix}

\item{cg}{bool, whether use the chain graphical parameterization, default true}

\item{condexp}{bool, whether to do the fast conditional posterior exploration (dcpe), default is FALSE for doing the dynamic posterior exploration (dpe)}

\item{lambdas}{hyperparameters to be explored by the algorithm, penalty on B, a list with lambda1 be a scalar, lambda0 be a vector, make sure length of lambda0 are the same as length of xi0}

\item{xis}{hyperparameters to be explored by the algorithm, penalty on Omega}

\item{theta_hyper_params}{hyperparameter to be set, prior on spike weight of B}

\item{eta_hyper_params}{hyperparameter to be set, prior on spike weight of Omega}

\item{diag_penalty}{bool, whether to penalize the diagonal, default no}

\item{max_iter}{maximum iterations for the EM algorithm}

\item{eps}{tolerance for convergence}

\item{s_max_condition}{only used in dpe, maximum tolerance for the condition number}

\item{obj_counter_max}{only used in dpe, maximum number of couting the objective function}

\item{verbose}{bool, whether to print intermidate notes}
}
\value{
A list with dynamic exploration result, point estimates are in `$Omega` and `$B`.
}
\description{
Main posterior exploration algorithm for multivariate chain graphical spike-and-slab LASSO.
}
\examples{
B <- diag(5)
graph <- g_modelAR1(5)
Omega <- graph$Omega
Sigma <- graph$Sigma
X <- matrix(rnorm(5*50),50,5)
Y <- rCARm(50,B,X,Sigma)
cgSSL_dpe_res <- mSSL(Y,X)
error_B(cgSSL_dpe_res$B,B)
error_Omega(cgSSL_dpe_res$Omega,Omega)
}
